controller:
  replicaCount: 1
  service:
    enabled: true
    type: LoadBalancer
    annotations: 
      io.cilium/lb-ipam-ips: "192.168.50.225" # Static IP Assignment

  extraVolumeMounts:
    - name: lua
      mountPath: /usr/local/etc/haproxy/haproxy-lua-http/http.lua
      subPath: http.lua
    - name: lua
      mountPath: /usr/local/etc/haproxy/auth-request.lua
      subPath: auth-request.lua
    - name: lua
      mountPath: /usr/local/etc/haproxy/json.lua
      subPath: json.lua

  extraVolumes:
    - name: lua
      configMap:
        name: lua  

  config:
    global-config-snippet: |
      # Path to haproxy-lua-http, below example assumes /usr/local/etc/haproxy/haproxy-lua-http/http.lua
      lua-prepend-path /usr/local/etc/haproxy/?/http.lua
      # Path to haproxy-auth-request
      lua-load /usr/local/etc/haproxy/auth-request.lua
      log stdout format raw local0 debug
    frontend-config-snippet: |
      ## Trusted Proxies.
      http-request del-header X-Forwarded-For

      ## Comment the above directive and the two directives below to enable the trusted proxies ACL.
      # acl src-trusted_proxies src -f trusted_proxies.src.acl
      # http-request del-header X-Forwarded-For if !src-trusted_proxies

      ## Ensure X-Forwarded-For is set for the auth request.
      acl hdr-xff_exists req.hdr(X-Forwarded-For) -m found
      http-request set-header X-Forwarded-For %[src] if !hdr-xff_exists
      option forwardfor

      # Host ACLs
      acl protected-frontends hdr(Host) -m reg -i ^(?i)(public|admin)\.emisia\.net

      http-request set-var(req.scheme) str(https) if { ssl_fc }
      http-request set-var(req.scheme) str(http) if !{ ssl_fc }
      http-request set-var(req.questionmark) str(?) if { query -m found }

      # Required Headers
      http-request set-header X-Forwarded-Method %[method]
      http-request set-header X-Forwarded-Proto  %[var(req.scheme)]
      http-request set-header X-Forwarded-Host   %[req.hdr(Host)]
      http-request set-header X-Forwarded-URI    %[path]%[var(req.questionmark)]%[query]

      # Protect endpoints with haproxy-auth-request and Authelia
      http-request lua.auth-intercept authelia_authelia_http /api/authz/forward-auth HEAD * remote-user,remote-groups,remote-name,remote-email - if protected-frontends
      http-request deny if protected-frontends !{ var(txn.auth_response_successful) -m bool } { var(txn.auth_response_code) -m int 403 }
      http-request redirect location %[var(txn.auth_response_location)] if protected-frontends !{ var(txn.auth_response_successful) -m bool }
